function [ ICAStruct, badChannels, epochNum ] = ICAPreprocess(ALLEEG, EEG, CURRENTSET, currentFile, EGPGPath, triggerNames, segPresent)
%Processes an EEG data set in a way which is optimal for the performance of
%independent components analysis
%Inputs:    ALLEEG = ALLEEG structure produced by eeglab
%           EEG = EEG structure produced by eeglab
%           CURRENTSET = CURRENTSET value provided by eeglab
%           currentFile = path of the EEG file which will be processed
%           EGPGPath = path of the EGPG pipeline folder
%           triggeNames = cell array containing list of event names that
%           will be epoched
%Outputs:   ALLEEG = updated ALLEEG structure for eeglab
%           EEG = updated EEG structure for eeglab
%           CURRENTSET = updated CURRENTSET value for eeglab
%           badChannels = vector containing the index of which electrodes
%           were identified as bad
%           epochNum = number of epochs generated by the preprocessing
%           procedure
%           horizFails = number of epochs which were removed because of
%           excessive eye movements

%Load parameters
load(strcat(EGPGPath,'\project_docs\Parameters.mat'));

%Import data
[ALLEEG, EEG, CURRENTSET] = importEEGData( ALLEEG, EEG, CURRENTSET, currentFile, segPresent );

%Correct trigger latency
[ALLEEG, EEG, CURRENTSET] = correctAmpDelay( ALLEEG, EEG, CURRENTSET );

%Downsample the data
[ALLEEG, EEG, CURRENTSET] = downsampleData( ALLEEG, EEG, CURRENTSET, PARAMETERS.ICA.downsampleRate );

%High pass filter the data
[ALLEEG, EEG, CURRENTSET] = EGPGFiltering( ALLEEG, EEG, CURRENTSET, [ PARAMETERS.ICA.highpass PARAMETERS.ICA.lowpass], 3 );

%Load channel structure
EEG = pop_chanedit(EEG, 'load',{strcat(EGPGPath,'\project_docs\GSN-HydroCel-129.sfp') 'filetype' 'autodetect'},'setref',{'4:132' 'Cz'},'changefield',{132 'datachan' 0});

%Interpolate bad channels
[ALLEEG, EEG, CURRENTSET, badChannels] = fixBadChannels( ALLEEG, EEG, CURRENTSET );

%Average reference the data
EEG = pop_reref( EEG, [],'refloc',struct('labels',{'Cz'},'Y',{0},'X',{5.4492e-16},'Z',{8.8992},'sph_theta',{0},'sph_phi',{90},'sph_radius',{8.8992},'theta',{0},'radius',{0},'type',{''},'ref',{'Cz'},'urchan',{132},'datachan',{0}));

% Remove line noise using CleanLine
EEG = pop_cleanline(EEG, 'bandwidth',2,'chanlist',[1:EEG.nbchan] ,'computepower',0,'linefreqs',[50 100] ,'normSpectrum',0,'p',0.01,'pad',2,'plotfigures',0,'scanforlines',1,'sigtype','Channels','tau',100,'verb',1,'winsize',4,'winstep',4);

%% Check whether to epoch or run ICA on continuous
[ epochAble ] = isEpochingAppropriate(EEG, triggerNames);

if epochAble
%Epoch the events
[ALLEEG, EEG, CURRENTSET, epochNum] = epochEvents( ALLEEG, EEG, CURRENTSET,  PARAMETERS.ICA.epochMin, PARAMETERS.ICA.epochMax, currentFile, triggerNames );
%identify bad epochs
[ extremFails ] = identExtremeValues( EEG, -500, 500 );
%reject bad epochs
EEG = pop_rejepoch( EEG, extremFails, 0);

else
    %do continuous cleaning
    epochNum = [];
end

%%
%Throw out one channel to reduce data rank
EEG = pop_select( EEG,'nochannel',{'E17'});

%run ICA
EEG = pop_runica(EEG, 'extended',1,'interupt','on');
EEG = eeg_checkset(EEG);

%Save ICA weights to output variable
ICAStruct.icaweights = EEG.icaweights;
ICAStruct.icawinv = EEG.icawinv;
ICAStruct.icasphere = EEG.icasphere;
ICAStruct.icachansind = EEG.icachansind;

end

